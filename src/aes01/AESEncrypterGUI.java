/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package aes01;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
//import com.sun.org.apache.xerces.internal.impl.dv.util.Base64;
//import it.sauronsoftware.base64.Base64;
import org.apache.commons.codec.binary.Base64;

/**
 *
 * @author Nick Pagano
 */
public class AESEncrypterGUI extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form AESEncrypterGUI
     */
    
    private SecretKey k;
    KeyGenerator keygen;
    public AESEncrypterGUI() throws NoSuchAlgorithmException {
        initComponents();
        this.keygen = KeyGenerator.getInstance("AES");
        this.k = keygen.generateKey();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jDialog2 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox1.setText("Select for Decryption (default encryption)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79)
                        .addComponent(jCheckBox1)))
                .addContainerGap(363, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jCheckBox1)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            // TODO add your handling code here:
            File f = jFileChooser1.getSelectedFile();
            String filename = f.getAbsolutePath();
            System.out.println(filename);
            String parent_dir = f.getParent();
            Cipher aesCipher;
                aesCipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
                
            //KeyGenerator keygen;
            //keygen = KeyGenerator.getInstance("AES");
            //SecretKey k = keygen.generateKey();
        FileReader fpin;
            FileWriter fpout;
            byte[] plaintext, ciphertext, temp;
            String s, aux, aux2;
            int t;
            fpin = new FileReader(filename);
            fpout = new FileWriter(filename + "_crypted.txt");
            BufferedReader br = new BufferedReader(fpin);
            BufferedWriter bw = new BufferedWriter(fpout);
            if(!this.jCheckBox1.isSelected()){
                aesCipher.init(Cipher.ENCRYPT_MODE, k);
                s = br.readLine();
                if(s!=null) {
                    do{
                        //aesCipher.init(Cipher.ENCRYPT_MODE, k);
                        ciphertext = aesCipher.doFinal(s.getBytes("UTF-8"));
                        System.out.println("cipher: " + ciphertext);
                        aux = Base64.encodeBase64String(ciphertext);
                        //temp = Base64.encode(ciphertext);
                        System.out.println("stringa: " + aux);
                        //aux = new String(temp, "UTF-8");
                        bw.write(aux);
                        s = br.readLine();
                        //aux = new String(ciphertext, Charset.defaultCharset());
                        //bw.write(aux);
                        bw.newLine();
                        
                        /*aesCipher.init(Cipher.DECRYPT_MODE, k);
                        System.out.println("b"  + aux.getBytes().length);
                        plaintext = aesCipher.doFinal(aux.getBytes(Charset.defaultCharset()));
                        aux2 = new String(plaintext, Charset.defaultCharset());
                        bw.write(aux2);
                        bw.newLine();*/
                    }while(s!=null);
                    bw.flush();
                    fpin.close();
                    fpout.close();
                }
            }else{
                aesCipher.init(Cipher.DECRYPT_MODE, k);
            
                s = br.readLine();
                if(s!=null) {
                    do{
                        System.out.println("stringa: " + s);
                        ciphertext = Base64.decodeBase64(s);
                        System.out.println("cipher: " + ciphertext);
                        plaintext = aesCipher.doFinal(ciphertext);
                        aux = new String(plaintext, "UTF-8");
                        bw.write(aux);
                        bw.newLine();
                        s = br.readLine();
                    }while(s!=null);
                    
                    bw.flush();
                    fpin.close();
                    fpout.close();
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
            
            
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AESEncrypterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AESEncrypterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AESEncrypterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AESEncrypterGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AESEncrypterGUI().setVisible(true);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new AESEncrypterGUI().setVisible(true);
                } catch (NoSuchAlgorithmException ex) {
                    Logger.getLogger(AESEncrypterGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println("GUIchar");
            }
        });
        
    }
}
